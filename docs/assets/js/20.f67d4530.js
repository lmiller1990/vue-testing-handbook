(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{170:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"vuex-のテスト"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex-のテスト","aria-hidden":"true"}},[t._v("#")]),t._v(" Vuex のテスト")]),a("p",[t._v("これ以降しばらくは、Vuex のテストについて解説していきます。")]),a("h2",{attrs:{id:"vuex-のテストにおける二つの側面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex-のテストにおける二つの側面","aria-hidden":"true"}},[t._v("#")]),t._v(" Vuex のテストにおける二つの側面")]),a("p",[t._v("一般的にいってコンポーネントは Vuex と以下の方法でやりとりをしています。")]),a("ol",[a("li",[t._v("mutation へ commit する")]),a("li",[t._v("action を dispatching する")]),a("li",[a("code",[t._v("$store.state")]),t._v(" もしくは getters 用いて state にアクセスする")])]),a("p",[t._v("コンポーネントについてのテストを書く場合には、コンポーネントが Vuex store の現在の state に基づいて正しく動作していてることを assert すればいいわけです。ですから mutation や action や getter がどのように実装されているかを知る必要はありません。(訳注: コンポーネントのテストを書く際に、mutation 等々のテストを含める必要はないということ。)")]),a("p",[t._v("それにたいして、store が遂行するロジック、例えば mutation や getter に関しては、それ自体を単独でテストをすることができます。なぜなら Vuex の store は通常の JavaScript の関数によって構成されているからで、それゆえユニットテスをするのも簡単です。")]),a("p",[t._v("まずは Vuex 単独のテストについて説明していきます。後半では、Vuex store を使ったコンポーネントのテスト技法を取り上げます。")])])}],!1,null,null,null);e.default=r.exports}}]);